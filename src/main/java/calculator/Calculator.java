package calculator;

import java.awt.Color;

/**
 *
 * @author Sahaun
 */
 
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
        
        getContentPane().setBackground(Color.decode("0xE0E0E0"));
        
        setTitle("Basic Calculator");
        initCalculator();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldPreviousNumber = new javax.swing.JTextField();
        fieldCurrentNumber = new javax.swing.JTextField();
        fieldOperator = new javax.swing.JTextField();
        button0 = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        buttonSign = new javax.swing.JButton();
        buttonDecimal = new javax.swing.JButton();
        buttonDivide = new javax.swing.JButton();
        buttonMultiply = new javax.swing.JButton();
        buttonSubtract = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttonEqual = new javax.swing.JButton();
        buttonPow = new javax.swing.JButton();
        buttonMod = new javax.swing.JButton();
        buttonSqrt = new javax.swing.JButton();
        buttonAC = new javax.swing.JButton();
        buttonC = new javax.swing.JButton();
        buttonBack = new javax.swing.JButton();
        buttonAns = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(40, 40, 40));
        setResizable(false);

        fieldPreviousNumber.setEditable(false);
        fieldPreviousNumber.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fieldPreviousNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldPreviousNumber.setFocusable(false);

        fieldCurrentNumber.setEditable(false);
        fieldCurrentNumber.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        fieldCurrentNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldCurrentNumber.setFocusable(false);

        fieldOperator.setEditable(false);
        fieldOperator.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fieldOperator.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fieldOperator.setToolTipText("");
        fieldOperator.setFocusable(false);
        fieldOperator.setPreferredSize(new java.awt.Dimension(28, 28));

        button0.setBackground(new java.awt.Color(0, 0, 0));
        button0.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button0.setForeground(new java.awt.Color(240, 240, 240));
        button0.setText("0");
        button0.setFocusable(false);
        button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button0ActionPerformed(evt);
            }
        });

        button1.setBackground(new java.awt.Color(0, 0, 0));
        button1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button1.setForeground(new java.awt.Color(240, 240, 240));
        button1.setText("1");
        button1.setFocusable(false);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setBackground(new java.awt.Color(0, 0, 0));
        button2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button2.setForeground(new java.awt.Color(240, 240, 240));
        button2.setText("2");
        button2.setFocusable(false);
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button3.setBackground(new java.awt.Color(0, 0, 0));
        button3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button3.setForeground(new java.awt.Color(240, 240, 240));
        button3.setText("3");
        button3.setFocusable(false);
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        button4.setBackground(new java.awt.Color(0, 0, 0));
        button4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button4.setForeground(new java.awt.Color(240, 240, 240));
        button4.setText("4");
        button4.setFocusable(false);
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        button5.setBackground(new java.awt.Color(0, 0, 0));
        button5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button5.setForeground(new java.awt.Color(240, 240, 240));
        button5.setText("5");
        button5.setFocusable(false);
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });

        button6.setBackground(new java.awt.Color(0, 0, 0));
        button6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button6.setForeground(new java.awt.Color(240, 240, 240));
        button6.setText("6");
        button6.setFocusable(false);
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });

        button7.setBackground(new java.awt.Color(0, 0, 0));
        button7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button7.setForeground(new java.awt.Color(240, 240, 240));
        button7.setText("7");
        button7.setFocusable(false);
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });

        button8.setBackground(new java.awt.Color(0, 0, 0));
        button8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button8.setForeground(new java.awt.Color(240, 240, 240));
        button8.setText("8");
        button8.setFocusable(false);
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });

        button9.setBackground(new java.awt.Color(0, 0, 0));
        button9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        button9.setForeground(new java.awt.Color(240, 240, 240));
        button9.setText("9");
        button9.setFocusable(false);
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });

        buttonSign.setBackground(new java.awt.Color(0, 0, 0));
        buttonSign.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonSign.setForeground(new java.awt.Color(240, 240, 240));
        buttonSign.setText("+/-");
        buttonSign.setFocusable(false);
        buttonSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSignActionPerformed(evt);
            }
        });

        buttonDecimal.setBackground(new java.awt.Color(0, 0, 0));
        buttonDecimal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonDecimal.setForeground(new java.awt.Color(240, 240, 240));
        buttonDecimal.setText(".");
        buttonDecimal.setFocusable(false);
        buttonDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecimalActionPerformed(evt);
            }
        });

        buttonDivide.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonDivide.setText("รท");
        buttonDivide.setFocusable(false);
        buttonDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDivideActionPerformed(evt);
            }
        });

        buttonMultiply.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonMultiply.setText("*");
        buttonMultiply.setFocusable(false);
        buttonMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMultiplyActionPerformed(evt);
            }
        });

        buttonSubtract.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonSubtract.setText("-");
        buttonSubtract.setFocusable(false);
        buttonSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubtractActionPerformed(evt);
            }
        });

        buttonAdd.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonAdd.setText("+");
        buttonAdd.setFocusable(false);
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonEqual.setBackground(new java.awt.Color(80, 100, 240));
        buttonEqual.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonEqual.setForeground(new java.awt.Color(240, 240, 240));
        buttonEqual.setText("=");
        buttonEqual.setFocusable(false);
        buttonEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEqualActionPerformed(evt);
            }
        });

        buttonPow.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        buttonPow.setText("pow");
        buttonPow.setFocusable(false);
        buttonPow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPowActionPerformed(evt);
            }
        });

        buttonMod.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        buttonMod.setText("mod");
        buttonMod.setFocusable(false);
        buttonMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModActionPerformed(evt);
            }
        });

        buttonSqrt.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        buttonSqrt.setText("โ");
        buttonSqrt.setFocusable(false);
        buttonSqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSqrtActionPerformed(evt);
            }
        });

        buttonAC.setBackground(new java.awt.Color(200, 190, 180));
        buttonAC.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        buttonAC.setText("AC");
        buttonAC.setFocusable(false);
        buttonAC.setPreferredSize(new java.awt.Dimension(49, 37));
        buttonAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonACActionPerformed(evt);
            }
        });

        buttonC.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        buttonC.setText("C");
        buttonC.setFocusable(false);
        buttonC.setPreferredSize(new java.awt.Dimension(49, 37));
        buttonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCActionPerformed(evt);
            }
        });

        buttonBack.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonBack.setText("<");
        buttonBack.setFocusable(false);
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        buttonAns.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        buttonAns.setText("ans");
        buttonAns.setFocusable(false);
        buttonAns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldCurrentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldPreviousNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldOperator, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(button7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonSign, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonEqual, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSubtract, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonPow, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonMod, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonAC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonSqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonAns, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldPreviousNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldOperator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldCurrentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonAC, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonAns, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonPow, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonMod, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonSqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonDivide, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSubtract, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonSign, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonEqual, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonACActionPerformed
        initCalculator();
    }//GEN-LAST:event_buttonACActionPerformed

    private void buttonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCActionPerformed
        currentText("0");
    }//GEN-LAST:event_buttonCActionPerformed

    private void buttonAnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnsActionPerformed
        handleAns();
    }//GEN-LAST:event_buttonAnsActionPerformed

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        removeLastDigit();
    }//GEN-LAST:event_buttonBackActionPerformed

    private void buttonPowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPowActionPerformed
        handleOperator("^");
    }//GEN-LAST:event_buttonPowActionPerformed

    private void buttonModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModActionPerformed
        handleOperator("%");
    }//GEN-LAST:event_buttonModActionPerformed

    private void buttonSqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSqrtActionPerformed
        handleOperator("โ");
    }//GEN-LAST:event_buttonSqrtActionPerformed

    private void buttonDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDivideActionPerformed
        handleOperator("รท");
    }//GEN-LAST:event_buttonDivideActionPerformed

    private void buttonMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMultiplyActionPerformed
        handleOperator("*");
    }//GEN-LAST:event_buttonMultiplyActionPerformed

    private void buttonSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubtractActionPerformed
        handleOperator("-");
    }//GEN-LAST:event_buttonSubtractActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        handleOperator("+");
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonEqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEqualActionPerformed
        handleEqual();
    }//GEN-LAST:event_buttonEqualActionPerformed

    private void button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button0ActionPerformed
        appendDigit(0);
    }//GEN-LAST:event_button0ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        appendDigit(1);
    }//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        appendDigit(2);
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        appendDigit(3);
    }//GEN-LAST:event_button3ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        appendDigit(4);
    }//GEN-LAST:event_button4ActionPerformed

    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        appendDigit(5);
    }//GEN-LAST:event_button5ActionPerformed

    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
        appendDigit(6);
    }//GEN-LAST:event_button6ActionPerformed

    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
        appendDigit(7);
    }//GEN-LAST:event_button7ActionPerformed

    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
        appendDigit(8);
    }//GEN-LAST:event_button8ActionPerformed

    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
        appendDigit(9);
    }//GEN-LAST:event_button9ActionPerformed

    private void buttonDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecimalActionPerformed
        appendDecimal();
    }//GEN-LAST:event_buttonDecimalActionPerformed

    private void buttonSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSignActionPerformed
        toggleSign();
    }//GEN-LAST:event_buttonSignActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton buttonAC;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonAns;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonC;
    private javax.swing.JButton buttonDecimal;
    private javax.swing.JButton buttonDivide;
    private javax.swing.JButton buttonEqual;
    private javax.swing.JButton buttonMod;
    private javax.swing.JButton buttonMultiply;
    private javax.swing.JButton buttonPow;
    private javax.swing.JButton buttonSign;
    private javax.swing.JButton buttonSqrt;
    private javax.swing.JButton buttonSubtract;
    private javax.swing.JTextField fieldCurrentNumber;
    private javax.swing.JTextField fieldOperator;
    private javax.swing.JTextField fieldPreviousNumber;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JTextField[] fields;
    private javax.swing.JButton[] buttons;
    private String lastAns;     // Variable to handle "ans"
    
    // Methods
    
    // Initializes the calculator
    // Simulates the AC button
    private void initCalculator() {
        // Text fields
        fields = new javax.swing.JTextField[] {
            fieldPreviousNumber, fieldOperator,
            fieldCurrentNumber
        };
        
        // Buttons
        buttons = new javax.swing.JButton[] {
            buttonAC,   buttonC,   buttonAns,     buttonBack,
            buttonPow,  buttonMod, buttonSqrt,    buttonDivide,
            button7,    button8,   button9,       buttonMultiply,
            button4,    button5,   button6,       buttonSubtract,
            button1,    button2,   button3,       buttonAdd,
            buttonSign, button0,   buttonDecimal, buttonEqual
        };
        
        enableCalculator();
        
        clearField(fieldCurrentNumber);
        clearField(fieldPreviousNumber);
        clearField(fieldOperator);
        
        currentText("0");
        lastAns = "0";
    }
    
    // Disables all buttons and fields except AC and current text field
    private void disableCalculator() {
        for (javax.swing.JTextField field : fields) field.setEnabled(false);
        for (javax.swing.JButton button : buttons) button.setEnabled(false);
        buttonAC.setEnabled(true);
        fieldCurrentNumber.setEnabled(true);
    }
    
    // Enables all buttons and fields
    private void enableCalculator() {
        for (javax.swing.JTextField field : fields) field.setEnabled(true);
        for (javax.swing.JButton button : buttons) button.setEnabled(true);
    }
    
    // Checks if the calculator is enabled
    private boolean calculatorEnabled() {
        return (button0.isEnabled());
    }
    
    // Clears a field
    // Doesn't reset to default values
    private void clearField(javax.swing.JTextField field) {
        field.setText("");
    }
    
    // Handles exception
    private String exception(String message) {
        disableCalculator();
        return message;
    }
    
    // Converts a number to string format
    private String stringify(double num) {        
        // Convert the number to Long if it is an integer (x.0)
        // and it doesn't exceed the maximum Long value
        if ((num% 1 == 0) && (num <= Long.MAX_VALUE)) {
            return Long.toString((long)num);
        }
        
        // Convert the number to a Double instead
        return Double.toString(num);
    }
    
    // Setter/Getter for text in a field
    private String fieldText(javax.swing.JTextField field) {
        return field.getText();
    }
    private String fieldText(javax.swing.JTextField field, String text) {
        field.setText(text);
        return fieldText(field);
    }
    private String fieldText(javax.swing.JTextField field, int number) {
        return fieldText(field, Integer.toString(number));
    }
    private String fieldText(javax.swing.JTextField field, double number) {
        return fieldText(field, Double.toString(number));
    }
    
    // Setter/Getter for operator
    private String operator() {
        return fieldText(fieldOperator);
    }
    private String operator(String operator) {
        return fieldText(fieldOperator, operator);
    }
    
    // Setter/Getter for current text
    private String currentText() {
        return fieldText(fieldCurrentNumber);
    }
    private String currentText(String text) {
        return fieldText(fieldCurrentNumber, text);
    }
    private String currentText(int number) {
        return fieldText(fieldCurrentNumber, number);
    }
    private String currentText(double number) {
        return fieldText(fieldCurrentNumber, number);
    }
    
    // Setter/Getter for previous text
    private String previousText() {
        return fieldText(fieldPreviousNumber);
    }
    private String previousText(String text) {
        return fieldText(fieldPreviousNumber, text);
    }
    private String previousText(int number) {
        return fieldText(fieldPreviousNumber, number);
    }
    private String previousText(double number) {
        return fieldText(fieldPreviousNumber, number);
    }
    
    // Checks if the operator is unary
    private boolean operatorIsUnary(String op) {
        String[] unary = {"โ"};
        for (String operator : unary) {
            if (operator.equals(op)) return true;
        }
        return false;
    }
    
    // Checks if the number has a decimal point (".")
    private boolean isDouble(String number) {
        return number.contains(".");
    }
    
    // Checks if the number has a negative sign ("-")
    private boolean isNegative(String number) {
        return (!number.isEmpty() && (number.charAt(0) == '-'));
    }
    
    // Toggles the current number between negative and non-negative
    private String toggleSign() {
        String str = currentText();
        str = isNegative(str) ? str.substring(1, str.length()) : (("-").concat(str));
        return currentText(str);
    }
    
    // Appends a decimal point to the current number
    private String appendDecimal() {
        String str = currentText();
        
        // If there is a decimal point already, do nothing
        if (!isDouble(str)) str = str.concat(".");
        
        return currentText(str);
    }
    
    // Appends a digit to the current number
    private String appendDigit(int digit) {
        String str = currentText();
        String d = Integer.toString(digit);
        
        // Overwrite the number if:
        // - the number is zero
        // - the number is not double (for cases like 0.x)
        if ((Double.valueOf(str) == 0.) && !isDouble(str)) {
            str = isNegative(str) ? "-" : "";
        }
        
        // Append the digit
        str = str.concat(d);
        
        return currentText(str);
    }
    
    // Removes the last digit from the current number
    private String removeLastDigit() {
        String str = currentText();
        str = str.substring(0, str.length()-1);
        
        // Reset the number to zero if:
        // - the number is empty
        // - the number is "-" (for cases like -x)
        if (str.isEmpty() || str.equals("-")) str = str.concat("0");
        
        return currentText(str);
    }
    
    // Handles "Ans" key
    private void handleAns() {
        currentText(lastAns);
    }
    
    // Handles operators
    private void handleOperator(String op) {
        // If the operator is unary... just do it
        if (operatorIsUnary(op)) {
            // Set the result as current value
            lastAns = calculate(currentText(), op);
            currentText(lastAns);
            
        // If no number is stored, store the current number
        } else if (previousText().isEmpty()) {
            // If string is in the form x., remove the decimal
            if (currentText().endsWith(".")) removeLastDigit();
            
            // Store the number and the operator
            previousText(currentText());
            operator(op);
            
            // Reset the current number
            currentText("0");
            
        // Otherwise, perform the operation
        } else {
            // If there is no error, handle the operation
            if (handleEqual()) handleOperator(op);
        }
    }
    
    // Handles calculation
    // Returns if the calculation has been performed successfully
    private boolean handleEqual() {
        // Set the result as current value
        lastAns = calculate(previousText(), currentText(), operator());
        currentText(lastAns);
        
        // Reset the stored number and operator
        previousText("");
        operator("");
        
        return calculatorEnabled();
    }
    
    // Calculation
    // For unary oprators
    private String calculate(String num1, String op) {
        double a, res;
        a = Double.valueOf(num1);
        res = a;
        
        switch (op) {
            case "โ":
                // Throw an exception for โ(-x)
                if (a < 0) {
                    return exception("Invalid input");
                }
                res = Math.sqrt(a);
            break;
            default: break;
        }
        
        // If the numbers exceed maximum value, throw an exception
        if (a > Double.MAX_VALUE) return exception("Overflow");
        if (res > Double.MAX_VALUE) return exception("Overflow");
        
        return stringify(res);
    }
    
    // For binary operators
    private String calculate(String num1, String num2, String op) {
        // If equal button is pressed without any operations
        // or the operator is unary
        if (num1.isEmpty() || operatorIsUnary(op)) return calculate(num2, op);
        
        double a, b, res;
        a = Double.valueOf(num1);
        b = Double.valueOf(num2);
        res = a;
        
        switch (op) {
            case "รท":
                // Throw an exception for x/0
                if (b == 0) {
                    if (a == 0) return exception("Undefined");
                    return exception("Infinity");
                }
                res = a/b;  
            break;
            case "*": res = a*b; break;
            case "-": res = a-b; break;
            case "+": res = a+b; break;
            case "^": res = Math.pow(a,b); break;
            case "%":
                // Throw an exception for x%0
                if (b == 0) return exception("Invalid input");
                res = a%b;
            break;
            default: break;
        }
        
        // If the numbers exceed maximum value, throw an exception
        if (a > Double.MAX_VALUE) return exception("Overflow");
        if (b > Double.MAX_VALUE) return exception("Overflow");
        if (res > Double.MAX_VALUE) return exception("Overflow");
        
        return stringify(res);
    }
}
